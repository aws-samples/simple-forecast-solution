# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Amazon SFS CloudFormation Installation Template

Mappings:
  Region2Ami:
    ap-southeast-1:
      amzn2: ami-0a6358c1d24b5b3a4
    ap-southeast-2:
      amzn2: ami-00728fac07787e1c5
    eu-central-1: 
      amzn2: ami-000d90ab744d79dbb
    eu-west-1:
      amzn2: ami-0e032abfb10b0b80a
    eu-west-2:
      amzn2: ami-09fb6eee0f4854e36
    us-east-1:
      amzn2: ami-0f840415174c4a8e0
    us-east-2:
      amzn2: ami-0a714e270d06489a9
    us-west-1:
      amzn2: ami-09d540cb66f1315ee
    us-west-2:
      amzn2: ami-0a20a878a1c1e5477

Resources:
  CustomerKey:
    Type: "AWS::KMS::Key"
    Properties:
      KeyPolicy:
        Version: "2012-10-17"
        Id: key1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - !Sub "${AWS::AccountId}"
                    - :root
            Action: kms:*
            Resource: "*"

  CustomerKeyAlias:
    Type: "AWS::KMS::Alias"
    Properties:
      AliasName: alias/sfs-deploy-key
      TargetKeyId: !Ref CustomerKey

  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: "10.0.10.0/24"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-pub-subnet"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: "10.0.30.0/24"
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-prv-subnet"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    DependsOn: Vpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt ElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat"

  ElasticIp:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-eip"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-pub-rtable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-prv-rtable"

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  DefaultSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub "${AWS::StackName}-default-sg"
      GroupDescription: "Default security group"

  SecurityGroupIngressHTTP:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: DefaultSecurityGroup
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: "tcp"
      CidrIp: "0.0.0.0/0"
      FromPort: 80
      ToPort: 80

  SecurityGroupIngressHTTPS:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: DefaultSecurityGroup
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: "tcp"
      CidrIp: "0.0.0.0/0"
      FromPort: 443
      ToPort: 443

  SecurityGroupEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: DefaultSecurityGroup
    Properties:
      GroupId: !Ref DefaultSecurityGroup
      IpProtocol: "tcp"
      CidrIp: "0.0.0.0/0"
      FromPort: 80
      ToPort: 80

  Ec2Instance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
        - Region2Ami
        - !Ref "AWS::Region"
        - amzn2
      InstanceType: "t3a.medium"
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SubnetId: !Ref PrivateSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
            Iops: 600
            DeleteOnTermination: true
            Encrypted: true
            KmsKeyId: !Ref CustomerKey
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          sudo -u ec2-user -i -- bash -c 'git clone https://github.com/aws-samples/simple-forecast-solution.git ; cd simple-forecast-solution ; source ./install.sh ; make deploy_all'

          # Shutdown the deployment instance
          poweroff
  
  Ec2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ec2-role"

  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref Ec2Role
